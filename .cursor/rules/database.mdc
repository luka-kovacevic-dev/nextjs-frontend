---
description: 
globs: src/payload/**/*,src/app/(payload)/**/*
alwaysApply: false
---
# Database Rules

## Rules:

[RULE]: Payload CMS integration structure (placeholder setup)
[EVIDENCE]: Found in directory structure: src/payload with subdirectories for adapters, collections, db, globals, hooks
[EXAMPLE]:
```
src/payload/
├── adapters/    # Adapters for external services
├── collections/ # Content type collections
├── db/          # Database configuration
├── globals/     # Global content types
├── hooks/       # Lifecycle hooks
```

[RULE]: Route group separation for admin and API functionalities
[EVIDENCE]: Found in directory structure: src/app/(payload) containing admin and api routes
[EXAMPLE]:
```
src/app/(payload)/
├── admin/            # Admin panel routes
│   └── [[...segments]]/  # Catch-all route for admin panel
├── api/              # API routes
    ├── access/       # Authentication/access control
    └── payload/      # Payload CMS API routes
        └── [...slug]/     # Catch-all route for API endpoints
```

[RULE]: Schema.org structured data for SEO rather than database schemas
[EVIDENCE]: Found in type definitions in src/lib/types/schema.ts and utility functions in src/lib/utils/metadata.ts
[EXAMPLE]:
```tsx
// src/lib/types/schema.ts (types imported in metadata.ts)
import {
  AboutPage,
  BreadcrumbList,
  FAQPage,
  Organization,
  Product,
  WebPage,
  WebSite,
} from '../types/schema';

// src/lib/utils/metadata.ts
export const getOrganizationSchema = (): Organization => {
  const schema: Organization = {
    '@context': 'https://schema.org' as const,
    '@type': 'Organization' as const,
    name: DEFAULT_METADATA.title,
    url: DEFAULT_METADATA.url,
    // Additional schema properties
  };
  
  return schema;
};
```

[RULE]: Static data management with no database integration
[EVIDENCE]: Found in page components that use hardcoded data arrays
[EXAMPLE]:
```tsx
// src/components/sections/hero.tsx
const features = [
  {
    title: 'Tailored workflows',
    description: 'Track progress across custom issue flows for your team.',
    icon: CircleDot,
  },
  {
    title: 'Cross-team projects',
    description: 'Collaborate across teams and departments.',
    icon: Blend,
  },
  // More static data...
];
```

[RULE]: Sitemap generation using static route definitions without database integration
[EVIDENCE]: Found in src/app/sitemap.ts
[EXAMPLE]:
```tsx
// src/app/sitemap.ts
export default async function sitemap() {
  // Define static routes
  const staticRoutes = [
    '',
    '/about',
    '/pricing',
    '/faq',
    '/contact',
    '/privacy',
  ];

  // Create sitemap entries for static routes
  const staticEntries = staticRoutes.map((route) => ({
    url: `${DOMAIN}${route}`,
    lastModified: new Date(),
    changeFrequency: 'weekly',
    priority: route === '' ? 1 : 0.8,
  }));

  return [...staticEntries];
}
```

Note: This codebase appears to have placeholder structures for Payload CMS integration, but the actual database implementation is either minimal or not yet implemented. The site primarily uses static data defined directly in the components rather than fetching from a database.