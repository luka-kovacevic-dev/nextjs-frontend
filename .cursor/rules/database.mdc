---
description: Database and content management approach for the Next.js site
globs: src/app/**/*,src/lib/**/*,src/components/**/*
alwaysApply: false
---
# Database Rules

## Rules:

[RULE]: Schema.org structured data for SEO
[EVIDENCE]: Found in type definitions in src/lib/types/schema.ts and utility functions in src/lib/utils/metadata.ts
[EXAMPLE]:
```tsx
// src/lib/types/schema.ts
import {
  AboutPage,
  BreadcrumbList,
  FAQPage,
  Organization,
  Product,
  WebPage,
  WebSite,
} from '../types/schema';

// src/lib/utils/metadata.ts
export const getOrganizationSchema = (): Organization => {
  const schema: Organization = {
    '@context': 'https://schema.org' as const,
    '@type': 'Organization' as const,
    name: DEFAULT_METADATA.title,
    url: DEFAULT_METADATA.url,
    // Additional schema properties
  };
  
  return schema;
};
```

[RULE]: Static data management with no database integration
[EVIDENCE]: Found in page components that use hardcoded data arrays
[EXAMPLE]:
```tsx
// src/components/sections/hero.tsx
const features = [
  {
    title: 'Tailored workflows',
    description: 'Track progress across custom issue flows for your team.',
    icon: CircleDot,
  },
  {
    title: 'Cross-team projects',
    description: 'Collaborate across teams and departments.',
    icon: Blend,
  },
  // More static data...
];
```

[RULE]: Sitemap generation using static route definitions
[EVIDENCE]: Found in src/app/sitemap.ts
[EXAMPLE]:
```tsx
// src/app/sitemap.ts
export default async function sitemap() {
  // Define static routes
  const staticRoutes = [
    '',
    '/about',
    '/pricing',
    '/faq',
    '/contact',
    '/privacy',
  ];

  // Create sitemap entries for static routes
  const staticEntries = staticRoutes.map((route) => ({
    url: `${DOMAIN}${route}`,
    lastModified: new Date(),
    changeFrequency: 'weekly',
    priority: route === '' ? 1 : 0.8,
  }));

  return [...staticEntries];
}
```

[RULE]: Content management through static files
[EVIDENCE]: MDX is used for content-heavy pages like privacy policy
[EXAMPLE]:
```
// MDX content in src/app/privacy/privacy.mdx
// Imported and rendered in src/app/privacy/page.tsx
```

[RULE]: Static asset management for images and resources
[EVIDENCE]: Images are stored in the public directory and loaded using Next.js Image component with a custom loader
[EXAMPLE]:
```tsx
// src/lib/imageLoader.ts
export const imageLoader = ({ src, width }: ImageLoaderProps): string => {
  return `${src}?w=${width}`;
};

// Usage in components with next/image
import Image from 'next/image';
import { imageLoader } from '@/lib/imageLoader';

<Image
  loader={imageLoader}
  src="/path/to/image.webp"
  alt="Description"
  width={400}
  height={300}
/>
```

Note: This codebase is built as a static Next.js site without database integration. All content is managed through static files, components with hardcoded data, and MDX for content-heavy pages. There are no database connections or CMS integrations implemented.